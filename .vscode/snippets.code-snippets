{
  // Place your c lang workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "hello": {
    "scope": "c",
    "prefix": "hi",
    "body": [
      "#include <stdio.h>\n",
      "int main()\n{\n",
      "\tprintf(\"Hello, World!\");$0\n",
      "\treturn 0;\n}"
    ],
    "description": "Print Hello World"
  },
  "for": {
    "prefix": "fr",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++)",
      "{",
      "\t$3",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum}", "{", "\t$2", "};"],
    "description": "Code snippet for enum"
  },
  "#inc": {
    "prefix": "inc",
    "body": ["#include <$1.h>"],
    "description": "Code snippet for #include < >"
  },
  "#incp": {
    "prefix": "incp",
    "body": ["#include \"$1.h\""],
    "description": "Code snippet for #include \" \""
  },
  "#incio": {
    "prefix": "#io",
    "body": ["#include <stdio.h>\n"],
    "description": "Code snippet for include stdio.h"
  },
  "#incm": {
    "prefix": "#m",
    "body": ["#include \"main.h\"\n"],
    "description": "Code snippet for include main.h"
  },
  "create function": {
    "prefix": "fn",
    "body": ["${1:type} ${2:funcName () {", "\n\t$3\n", "\treturn t;", "};"],
    "description": "Creates a function that returns the int type"
  },
  "Print variable of type integer": {
    "prefix": "pint",
    "body": ["printf(\"$0 :>> %d\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type signed integer"
  },
  "Print variable of type char": {
    "prefix": "pcha",
    "body": ["printf(\"$0 :>> %c\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type char"
  },
  "Print variable of type pointer": {
    "prefix": "ppoint",
    "body": ["printf(\"$0 :>> %p\\n\", (void *) $0);"],
    "description": "Calls printf() to log value of variable of type pointer"
  },
  "Print variable of type size_t": {
    "prefix": "psiz",
    "body": ["printf(\"$0 :>> %zu\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type size_t"
  },
  "Allocate memory using calloc": {
    "prefix": "cal",
    "body": [
      "$1*ptr = ($1*)calloc($2, sizeof($1));",
      "",
      "if (ptr == NULL)",
      "{",
      "  printf(\"Memory allocation failed!\\n\");",
      "  exit(0);",
      "}",
      "",
      "free(ptr);"
    ],
    "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
  },
  "Creates a header include guard": {
    "prefix": "ig",
    "body": [
      "#ifndef ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
      "#define ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
      "",
      "// Code for header body",
      "",
      "#endif //${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}"
    ],
    "description": "Creates header include guard based on file name"
  }
}
